<?xml version="1.0" encoding="UTF-8"?>
<hb:RuleSet xmlns:hb="HANDBOOK"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="HANDBOOK ../XSD/handbook.xsd">
	
	<hb:Rule UID="CNE_00100">
		<hb:RuleUID>CNE_00100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of active low signal</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Identifying signal active level by reading its name allows better readability and maintainability.</hb:Rationale>
			<hb:ShortDesc>Active low signal ends by a suffix: "_n".</hb:ShortDesc>
			<hb:LongDesc> By default, all signals are considered as active high signals.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_00100_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_00100_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_00100_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_00100_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_00200">
		<hb:RuleUID>CNE_00200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Yosys-ghdl</hb:Engine>
			<hb:Version>7</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unsuitability of frequency in clock name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Clock frequency can be changed during the development (for power consumption reason...). In such a case, if the clock signal name contains frequency value, it can lead to major code modification to update this value, or lead to misunderstanding.
			</hb:Rationale>
			<hb:ShortDesc>The clock signal name does not contain the clock frequency value.</hb:ShortDesc>
			<hb:LongDesc>The clock relation for derivative clock, like mainclk_div2 for mainclk with a frequency divided by two, is a good way to show relation between clocks.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_00200_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_00200_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_00200_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_00200_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>

	<hb:Rule UID="CNE_00300">
		<hb:RuleUID>CNE_00300</hb:RuleUID>
		<hb:RuleHist>
            <hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>7</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unsuitability of pin number in signal name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Board layout optimization can lead to FPGA/ASIC pins swapping. ASIC/FPGA development often needs several targets with pinout mismatching. In such a case, if the VHDL code contains signal with FPGA/ASIC pins number information, it can lead to major code modification to update this value or lead to misunderstanding.</hb:Rationale>
			<hb:ShortDesc>Signal name does not contain FPGA/ASIC pin number value.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_00300_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_00300_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_00300_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_00300_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>

	<hb:Rule UID="CNE_00400">
		<hb:RuleUID>CNE_00400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Name of testbench entity</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Identification (suffix or prefix) for testbench entity improves the identification of which entity is the testbench of which entity.</hb:Rationale>
			<hb:ShortDesc>The suffix of testbench entity name is "_tb".</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>

	<hb:Rule UID="CNE_00500">
		<hb:RuleUID>CNE_00500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Convention for signal naming</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>When a unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.</hb:Rationale>
			<hb:ShortDesc>Each word that composes a signal name are clearly identified with an underscore.</hb:ShortDesc>
			<hb:LongDesc>In order to separate words in signal name the following convention is applied: Name_Of_The_Signal.
The separation by uppercase (NameOfTheSignal) is not used.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_00600">
		<hb:RuleUID>CNE_00600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Convention for constant naming</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>When an unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.</hb:Rationale>
			<hb:ShortDesc>Each word that composes a constant name are clearly identified with an underscore.</hb:ShortDesc>
			<hb:LongDesc>In order to separate words in a constant name the following convention is applied: Name_Of_The_Constant.
The separation by uppercase (NameOfTheConstant) is not used.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_00700">
		<hb:RuleUID>CNE_00700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Convention for process naming</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>When an unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.</hb:Rationale>
			<hb:ShortDesc>Each word that composes a process name are clearly identified with an underscore.</hb:ShortDesc>
			<hb:LongDesc>In order to separate words in a process name the following convention is applied: Name_Of_The_Process.
The separation by uppercase (NameOfTheProcess) is not used.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_00800">
		<hb:RuleUID>CNE_00800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Convention for generic ports</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>When an unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.</hb:Rationale>
			<hb:ShortDesc>Each words that composes a generic port name are clearly identified with an underscore.</hb:ShortDesc>
			<hb:LongDesc>In order to separate words in a generic port name the following convention is applied: Name_Of_The_Generic.
The separation by uppercase (NameOfTheGeneric) is not used.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_00900">
		<hb:RuleUID>CNE_00900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Convention for custom type naming</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>When an unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.</hb:Rationale>
			<hb:ShortDesc>Each word that composes a custom type name are clearly identified with an underscore.</hb:ShortDesc>
			<hb:LongDesc>In order to separate word in a custom type name the following convention is applied: Name_Of_The_Customtype.
The separation by uppercase (NameOfTheCustomtype) is not used.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule><hb:Rule UID="CNE_01000">
		<hb:RuleUID>CNE_01000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of variable name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>When an unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.
With this convention, designer will be able to track synthesis of variable and especially identify if a variable created some unwanted flip-flops.</hb:Rationale>
			<hb:ShortDesc>The name of a variable use "v_" prefix.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01000_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_01000_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01000_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_01000_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Prefix</hb:Position>
				<hb:Value>v_</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>		
	</hb:Rule>
	
	<hb:Rule UID="CNE_01100">
		<hb:RuleUID>CNE_01100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of ports direction inside entity port name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Indicating the port direction inside the port name improves readability.</hb:Rationale>
			<hb:ShortDesc>Entity port name uses prefix to determine the port direction.</hb:ShortDesc>
			<hb:LongDesc>Prefixes are: 
				"i_" for input port, 
				"o_" for output port, 
				"b_" for bidirectional port.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01100_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_01100_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01100_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_01100_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule><hb:Rule UID="CNE_01200">
		<hb:RuleUID>CNE_01200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of process label</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Differentiating process label from other VHDL object improves readability.</hb:Rationale>
			<hb:ShortDesc>Process label name starts by a prefix: "P_".</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01200_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_01200_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01200_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_01200_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Prefix</hb:Position>
				<hb:Value>p_</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	<hb:Rule UID="CNE_01300">
		<hb:RuleUID>CNE_01300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of constant name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Differentiating constant object from other VHDL object improves readability.</hb:Rationale>
			<hb:ShortDesc>Constant name starts by a prefix: "c_".</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01300_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_01300_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01300_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_01300_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_01400">
		<hb:RuleUID>CNE_01400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of generic port name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Differentiating generic port object from other VHDL objects name allows better readability and maintainability.</hb:Rationale>
			<hb:ShortDesc>Generic port name starts by a prefix: "g_".
			</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01400_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_01400_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01400_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_01400_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_01500">
		<hb:RuleUID>CNE_01500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of custom type name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Differentiating custom type from other VHDL objects name allows better readability and maintainability.</hb:Rationale>
			<hb:ShortDesc>Custom type name starts by a prefix: "t_".</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01500_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_01500_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01500_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_01500_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	
	
	<hb:Rule UID="CNE_01600">
		<hb:RuleUID>CNE_01600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of package element</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>A well defined prefix for package name improves identification of the origin of the element.</hb:Rationale>
			<hb:ShortDesc>The prefix of package element name is "pkg_".</hb:ShortDesc>
			<hb:LongDesc>Package elements considered are: the package name itself and all VHDL object declared and defined inside the package.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01600_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_01600_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01600_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_01600_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Prefix</hb:Position>
				<hb:Value>pkg_</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_01700">
		<hb:RuleUID>CNE_01700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of rising edge detection signal</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Identifying signal that represents the edge detection of another one by reading its name improves readability.</hb:Rationale>
			<hb:ShortDesc>The suffix of a signal that represents a rising edge of another one is: "_re".</hb:ShortDesc>
			<hb:LongDesc>The detected signal is also included inside the signal name. 
Thus, a signal that represents a rising edge of a signal named My_Sig is My_Sig_re.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01700_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_01700_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01700_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_01700_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_01800">
		<hb:RuleUID>CNE_01800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of falling edge detection signal</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Identifying signal that represents the edge detection of another one by reading its name improves readability.</hb:Rationale>
			<hb:ShortDesc>The suffix of a signal that represents a falling edge of another one is: "_fe".</hb:ShortDesc>
			<hb:LongDesc>The detected signal is also included inside the signal name. 
Thus, a signal that represents a falling edge of a signal named My_Sig is My_Sig_fe.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01800_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_01800_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01800_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_01800_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule><hb:Rule UID="CNE_01900">
		<hb:RuleUID>CNE_01900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of registered signals</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Identifying signal that is clock delayed of another one by reading its name improves readability.</hb:Rationale>
			<hb:ShortDesc>The suffix of a signal that is a registration of another one is: "_r".</hb:ShortDesc>
			<hb:LongDesc>The signal source is also included inside the signal name.
Thus, a signal that is clock delayed of a signal named My_Signal is My_Signal_r.
If a small number of registration of a same signal is used (less or equal to 3), SIGNAL_r can become SIGNAL_rx where x is the number of registration stage.
If a significant number of registration of a same signal is used, use an array for registration level instead of different signals.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01900_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_01900_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01900_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_01900_bad</hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="CNE_02000">
		<hb:RuleUID>CNE_02000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Yosys-ghdl</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of Finite State Machine</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Identifying Finite State Machine (FSM) improves analysis of synthesis log files.</hb:Rationale>
			<hb:ShortDesc>FSM signal name uses prefix : "sm_".</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_02000_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_02000_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_02000_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_02000_bad</hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
			   <hb:ParamID>P1</hb:ParamID>
			   <hb:Position>Prefix</hb:Position>
			   <hb:Value>sm_</hb:Value>
		   </hb:StringParam>
	   </hb:RuleParams>
	</hb:Rule>

	<hb:Rule UID="CNE_02100">
		<hb:RuleUID>CNE_02100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Name of RTL architectures</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Meaningful architecture name helps managing simulation and implementation sources.</hb:Rationale>
			<hb:ShortDesc>VHDL architecture are of type Behavioral, RTL or Simulation.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_02100_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_02100_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_02100_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_02100_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		 	<hb:RuleParams>
				<hb:StringParam>
					<hb:ParamID>P1</hb:ParamID>
					<hb:Position>Contain</hb:Position>
					<hb:Value>Behavioral</hb:Value>
				</hb:StringParam>
				<hb:StringParam>
					<hb:ParamID>P2</hb:ParamID>
					<hb:Position>Contain</hb:Position>
					<hb:Value>RTL</hb:Value>
				</hb:StringParam>
				<hb:StringParam>
					<hb:ParamID>P3</hb:ParamID>
					<hb:Position>Contain</hb:Position>
					<hb:Value>Simulation</hb:Value>
				</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_02200">
		<hb:RuleUID>CNE_02200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Name of configuration entity</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00800</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Identification of configuration entity name improves the identification of this file inside the project.</hb:Rationale>
			<hb:ShortDesc>The suffix of configuration entity name is "_cfg".</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="CNE_02300">
		<hb:RuleUID>CNE_02300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2015-02-17</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Preservation of clock name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00700</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Change of name through affectation of a signal to another one without any logical modification can lead to simulation mismatch as this affectation take an additional simulator tick to be processed. </hb:Rationale>
			<hb:ShortDesc>Clock signal keeps its name through hierarchy levels.</hb:ShortDesc>
			<hb:LongDesc>Clock signal is not renamed inside an entity through signal affectation. 
It is also best practice to keep the clock name the same between entity ports within a project.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_02300_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_02300_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_02300_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_02300_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="CNE_02400">
		<hb:RuleUID>CNE_02400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2015-02-17</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Preservation of reset name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00700</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Change of name through affectation of a signal to another one without any logical modification can lead to simulation mismatch as this affectation take an additional simulator tick to be processed. Moreover, renaming a reset signal can lead to break the reset tree.</hb:Rationale>
			<hb:ShortDesc>Reset signal keeps its name through hierarchy levels.</hb:ShortDesc>
			<hb:LongDesc>Reset signal is not renamed inside an entity through signal affectation. 
It is also best practice to keep the reset name the same between entity ports within a project.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_02400_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_02400_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_02400_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_02400_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule><hb:Rule UID="CNE_02500">
		<hb:RuleUID>CNE_02500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Length of entities name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Compact entity names ensures compact tree structure which improves readability inside the different software.</hb:Rationale>
			<hb:ShortDesc>Hierarchical level entity's names length is less than 20 characters.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule><hb:Rule UID="CNE_02600">
		<hb:RuleUID>CNE_02600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Length of signals name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Compact signal names improve readability.</hb:Rationale>
			<hb:ShortDesc>Internal signal names length is less than 20 characters.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule><hb:Rule UID="CNE_02700">
		<hb:RuleUID>CNE_02700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Number of lines in file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Compact VHDL files reduce the complexity of the function defined and thus the risk of a bug.
Too many lines inside a VHDL file might depict a badly designed module or an architecture definition problem.</hb:Rationale>
			<hb:ShortDesc>The HDL architectural code have a limited number of lines set to 450.</hb:ShortDesc>
			<hb:LongDesc>HDL architectural code are the VHDL statements included between the begin statement and the end statement of the architecture. 
The definition area (for signals, constants components...) is not included in this area, nor are the comments lines.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	<hb:RuleParams>
			<hb:IntParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Relation>LET</hb:Relation>
				<hb:Value>450</hb:Value>
			</hb:IntParam>
		</hb:RuleParams>
	</hb:Rule>
	<hb:Rule UID="CNE_02800">	
		<hb:RuleUID>CNE_02800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Software VHDL generator in header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02400</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Inserting information about the automatic tool used for VHDL file generation improves code review (as the reviewer doesn't want to check automatically generated code if not modified by hand) and reusability (as it can secure which software version has been used to create the file).</hb:Rationale>
			<hb:ShortDesc>Header of file includes references to the automatic VHDL files generator.</hb:ShortDesc>
			<hb:LongDesc>When a VHDL code file is generated automatically by a software then the header of this file includes information about the software used and its version.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc> 
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>		
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>Automatic VHDL coding</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_02900">
		<hb:RuleUID>CNE_02900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>File name in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02400</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>File name in the header ensures that the header really applies to the current file and is not a copy/paste header.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the name of the file.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
			<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>File name</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	<hb:Rule UID="CNE_03000">
		<hb:RuleUID>CNE_03000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Creation date in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02400</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Creation date in the header of file improves traceability.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the file creation date.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
				<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>File Creation date</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	<hb:Rule UID="CNE_03100">
		<hb:RuleUID>CNE_03100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Project name in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02400</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Project name in the header of file improves traceability.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the targeted project name.</hb:ShortDesc>
			<hb:LongDesc>The project name could be an ID or a code name for critical projects.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>Project name</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>

	</hb:Rule>
	<hb:Rule UID="CNE_03200">
		<hb:RuleUID>CNE_03200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Author in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02400</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Author in the header of file improves traceability.</hb:Rationale>
			<hb:ShortDesc>Header of file includes author name of file.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>Author</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	<hb:Rule UID="CNE_03300">
		<hb:RuleUID>CNE_03300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Functional description in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02500</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Functional description in the header of file allows peer reviewer to gain a minimum knowledge of the functionality without having to seek for design document.</hb:Rationale>
			<hb:ShortDesc>Header of file includes a brief functional description of the entity.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>Description</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	<hb:Rule UID="CNE_03400">
		<hb:RuleUID>CNE_03400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Naming convention in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02500</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Naming convention summary in the header of file improves the understanding of the code by the peer reviewer.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the commonly used naming convention.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>Naming conventions</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	<hb:Rule UID="CNE_03500">
		<hb:RuleUID>CNE_03500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Functional limitation in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02500</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Functional limitation information reduces the possibility of introducing a bug when doing an update of the VHDL code.</hb:Rationale>
			<hb:ShortDesc>Header of file includes functional limitations of the entity.</hb:ShortDesc>
			<hb:LongDesc>The limitation could be an assumption taken by the designer regarding an unclear specification that leads to a specific implementation.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>Limitations</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	<hb:Rule UID="CNE_03600">
		<hb:RuleUID>CNE_03600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Current version number in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02200</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Current version of file in the header of the file allows traceability and reuse.</hb:Rationale>
			<hb:ShortDesc>Header of file includes current version of file.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>Version</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>	
		</hb:Rule>
	
	<hb:Rule UID="CNE_03700">
		<hb:RuleUID>CNE_03700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Author of modification(s) in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02200</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Listing of the author of the modification allows matching of author coding style profile with the produced VHDL during code analysis.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the name of the author of the modification(s).</hb:ShortDesc>
			<hb:LongDesc>This information is added for each new version of the file.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>Author name's</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	<hb:Rule UID="CNE_03800">
		<hb:RuleUID>CNE_03800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Version history in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02200</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Revision control improves IP integration time.
Understanding the last modifications allows integrator to know if a bug was corrected or if the modification will produce a problem.</hb:Rationale>
			<hb:ShortDesc>Header of file includes current and previous file version ID and date.</hb:ShortDesc>
			<hb:LongDesc>The header of the file includes a version tag (like number, letters..) with a modification date that identifies the current and previous version of the code.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>Version history</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	<hb:Rule UID="CNE_03900">
		<hb:RuleUID>CNE_03900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Reason(s) of modification(s) in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02200</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Reason(s) of modification(s) in the header of file improves traceability and reuse.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the reason(s) of the modification(s).</hb:ShortDesc>
			<hb:LongDesc>This information is added for each new version of the file. The reason could be, for example, a change in the specification document, a bug correction, an improvement...</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>Version</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	<hb:Rule UID="CNE_04000">
		<hb:RuleUID>CNE_04000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Functional impact(s) of modifications in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02200</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Functional impact(s) in the versioning of file improves traceability.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the functional impacts of a modification.</hb:ShortDesc>
			<hb:LongDesc>This information is added for each new version of the file. The functional impact could be, for example, a change of output signal activation from edge to level, a change of compatible technology (from Xilinx to Atmel FPGAs)...</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>Modifications impacts</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>	
		</hb:Rule>
	<hb:Rule UID="CNE_04100">
		<hb:RuleUID>CNE_04100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Functional description of modifications in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02200</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Revision control improves IP integration time.
Understanding the last modifications allows integrator to know if a bug was corrected or if the modification will produce a problem.</hb:Rationale>
			<hb:ShortDesc>Header of file includes a functional description of modifications.</hb:ShortDesc>
			<hb:LongDesc>This information is added for each new version of the file.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>Modification description </hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04200">
		<hb:RuleUID>CNE_04200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Applicable license in header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02300</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Writing license in the header informs a third party reader what can be done with the file.</hb:Rationale>
			<hb:ShortDesc>Header of file includes a license.</hb:ShortDesc>
			<hb:LongDesc>The license could be a GNU public one, all right reserved to the company owner or any additional information regarding the reuse, the transfer of the file by a third party to an other one.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>	
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>Licensing</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	<hb:Rule UID="CNE_04300">
		<hb:RuleUID>CNE_04300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Company coding in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02300</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>This information improves understanding of the project context.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the company name developing the code.</hb:ShortDesc>
			<hb:LongDesc>If the VHDL is developed by a subcontractor, the name of this company will be written in the header.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>Developper Company</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04400">
		<hb:RuleUID>CNE_04400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Company owner of code in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02300</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>This information improves understanding of the project context.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the company for which the code is developed.</hb:ShortDesc>
			<hb:LongDesc>The name of the company responsible for this FPGA is written in the header.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value> on behalf of</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>

	<hb:Rule UID="CNE_04500">
		<hb:RuleUID>CNE_04500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2015-02-17</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Reset registers</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Reset</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Registers which are not reset, will cause Post layout simulation mismatch. Thus these signals will have to be handled with a special attention. 
Isolating them from initialized signal improves identification of these signals while reading VHDL code, or within the netlist (if label are used for the process).</hb:Rationale>
			<hb:ShortDesc>Do not assign in the same process initialized signals with non-initialized ones.</hb:ShortDesc>
			<hb:LongDesc>Signal registers which are not initialized (by a reset signal) within a synchronous process are not located in the same process as initialized register signals.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_04500_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_04500_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_04500_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_04500_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04600">
		<hb:RuleUID>CNE_04600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Yosys-ghdl</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-10-19</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Finite State Machine coding style</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>StateMachine</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>State machines are identified by synthesis tools. These tools do not understand all the exotic ways of coding state machines. In order to get a real state machine use an approved state machine coding style.</hb:Rationale>
			<hb:ShortDesc>FSM are coded using an approved method.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04700">
		<hb:RuleUID>CNE_04700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Finite State Machine single process based</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>CNE_04600</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>StateMachine</hb:SubCategory>
			<hb:Severity>Note</hb:Severity>
			<hb:Rationale>State machines are identified by synthesis tools. These tools do not understand all the exotic ways of coding state machines. In order to get a real state machine use an approved state machine coding style.</hb:Rationale>
			<hb:ShortDesc>FSM coding style use the one synchronous process method.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_04700_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_04700_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04800">
		<hb:RuleUID>CNE_04800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Finite State Machine two processes based</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>CNE_04600</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>StateMachine</hb:SubCategory>
			<hb:Severity>Note</hb:Severity>
			<hb:Rationale>State machines are identified by synthesis tools. These tools do not understand all the exotic ways of coding state machines. In order to get a real state machine use an approved state machine coding style.</hb:Rationale>
			<hb:ShortDesc>FSM coding style use the two processes method.</hb:ShortDesc>
			<hb:LongDesc>FSM coding style use one synchronous process for state registration and one asynchronous process for states and outputs assertion.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_04800_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_04800_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04900">
		<hb:RuleUID>CNE_04900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Use of clock signal</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Clocking</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Clock is one of the most critical signal in the design. Use of a clock signal for other input than the dedicated logic one can lead to moving the clock signal out of its low skew dedicated route. This can lead to timing mismatch on the device.</hb:Rationale>
			<hb:ShortDesc>Clock signal is not used inside combinational function like multiplexor or digital gate.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_04900_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_04900_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_04900_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_04900_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_05000">
		<hb:RuleUID>CNE_05000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Multiplexor coding style</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Combinational</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>A badly written multiplexor can lead to latches and mismatches between simulation and the device.</hb:Rationale>
			<hb:ShortDesc>Multiplexor are coded using an approved method.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_05100">
		<hb:RuleUID>CNE_05100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Multiplexor single process based</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>CNE_05000</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Combinational</hb:SubCategory>
			<hb:Severity>Note</hb:Severity>
			<hb:Rationale>A badly written multiplexor can lead to latches and mismatches between simulation and the device.</hb:Rationale>
			<hb:ShortDesc>Multiplexor coding style uses an asynchronous process.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_05100_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_05100_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_05200">
		<hb:RuleUID>CNE_05200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Multiplexor direct assertion based</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>CNE_05000</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Combinational</hb:SubCategory>
			<hb:Severity>Note</hb:Severity>
			<hb:Rationale>A badly written multiplexor can lead to latches and mismatches between simulation and the device.</hb:Rationale>
			<hb:ShortDesc>Multiplexor coding style uses direct assertions.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_05200_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_05200_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="CNE_05300">
		<hb:RuleUID>CNE_05300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>3</hb:Version>
			<hb:Creation>2015-02-17</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Hierarchical level of entity</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_07000</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Miscellaneous</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>A limited hierarchical levels between the top and the lowest level entity improves understanding of project.</hb:Rationale>
			<hb:ShortDesc>The number of nested entities should not be superior to 10.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_05400">
		<hb:RuleUID>CNE_05400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>3</hb:Version>
			<hb:Creation>2015-02-17</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Number of nested packages</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_07000</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Miscellaneous</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>A limited number of nested packages improves understanding of project.</hb:Rationale>
			<hb:ShortDesc>The number of nested packages should not be superior to 3.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_05500">
		<hb:RuleUID>CNE_05500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>3</hb:Version>
			<hb:Creation>2015-02-17</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Dimension of array</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_07000</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Miscellaneous</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>A limited number of dimension in array reduces complexity and improves readability.</hb:Rationale>
			<hb:ShortDesc>The use of arrays with dimension greater than 2 is forbidden.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:RuleSetHist>
		<hb:Version>5</hb:Version>
		<hb:Creation>2014-11-13</hb:Creation>
		<hb:Modified>2020-07-23</hb:Modified>
		<hb:Revision>V1 : 2014-11-13 : Creation
V2   : 2014-12-01 : Update rules with results from CNES poll and 1st draft review.
V3   : 2015-02-17 : Update of rules with remarks from partners about V2 revision.
V4   : 2015-07-16 : Update rules with examples
V5   : 2017-11-24 : Creation of Sonarqube data and update of some status
V6   : 2020-04-23 : Update status to implemented for rules in software. Correct sonarqube elements. Add parameters.
V7   : 2020-07-23 : update engine feature
V7.1 : 2021-10-19 : add impleted status to selected rules
		</hb:Revision>
	</hb:RuleSetHist>	

</hb:RuleSet>
